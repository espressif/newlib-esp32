#-------------------------------------------------------------------------
# Source files
#-------------------------------------------------------------------------

gloss_hdrs =

gloss_srcs =

gloss_specs = \
	default.specs \
	nano.specs

gloss_ldscripts =

# Extra files

crtX_source = crt0.S

libsys_qemu  := libsys_qemu.a
libsys_openocd  := libsys_openocd.a

board_outdir =

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.

MULTIDIRS =
MULTISUBDIR =
MULTIDO = true
MULTICLEAN = true

#-------------------------------------------------------------------------
# Basic setup
#-------------------------------------------------------------------------

# Default is to build the prereqs of the all target (defined at bottom)

default : all
.PHONY : default

# Source directory

obj_dir := .
src_dir := @srcdir@
VPATH   := $(src_dir)

# Installation directories

prefix  := @prefix@
DESTDIR ?= $(prefix)

WORKDIR := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

install_hdrs_dir := $(DESTDIR)$(prefix)/$(target_alias)/include/machine
install_libs_dir  = $(DESTDIR)$(prefix)/$(target_alias)/lib${MULTISUBDIR}

#-------------------------------------------------------------------------
# Programs and flags 
#-------------------------------------------------------------------------

# C compiler

CC            := @CC@
CFLAGS        := @CFLAGS@
CPPFLAGS      = -I$(obj_dir) -I$(src_dir) -I$(src_dir)/include
COMPILE       = $(CC) -MMD -MP $(CPPFLAGS) $(CFLAGS)

# Library creation

AR            := @AR@
RANLIB        := @RANLIB@

# Installation

INSTALL       := @INSTALL@
INSTALL_DATA  := @INSTALL_DATA@

%_openocd.o: %.c
	$(COMPILE) -DOPENOCD_SEMIHOSTING -c -o $@ $<

%_qemu.o: %.c
	$(COMPILE) -DQEMU_SEMIHOSTING -c -o $@ $<

%.o : %.S
	$(COMPILE) -c -o $@ $<

#-------------------------------------------------------------------------
# Append variables with board specific data
#-------------------------------------------------------------------------

# actually Xtensa `boards` dir contains subdirs for different chips,
# so we need to detect chip from command line and select proper board subdir (if any) for build
ifeq ($(shell $(CC) -v 2>&1 | grep -c "clang version"), 1)
    ifeq ($(shell $(CC) -dumpmachine 2>&1), xtensa-esp-unknown-elf)
        TARGET_BOARD = $(strip $(patsubst -mcpu=%, %, $(filter -mcpu=%, $(CC))))
        ifeq ("$(TARGET_BOARD)", "")
            TARGET_BOARD = esp32
        endif
    endif
else
    TARGET_BOARD = $(strip $(patsubst xtensa-%-elf, %, $(shell $(CC) -dumpmachine)))
endif

# add board specific sources if board exists
ifneq ("$(wildcard $(src_dir)/boards/$(TARGET_BOARD))", "")
	CPPFLAGS += -I$(src_dir)/boards/$(TARGET_BOARD)/include

	board_outdir += $(WORKDIR)/boards/$(TARGET_BOARD)
	junk += $(WORKDIR)/boards

	gloss_srcs += \
		window-vectors.S \
		sleep.S \
		syscalls.c \
		boards/$(TARGET_BOARD)/board.c

	gloss_specs += \
		sim.elf.specs \
		board.elf.specs \
		sys.qemu.specs \
		sys.openocd.specs

	gloss_ldscripts += \
		boards/$(TARGET_BOARD)/memory.elf.ld \
		app.elf.ld

	syscalls_qemu_src += \
		sim-vectors.S \
		sim-call.S \
		syscalls.c

	syscalls_openocd_src += \
		syscalls.c

	crtX_source += crt1-sim.S crt1-boards.S

	install_libs += $(libsys_qemu)
	install_libs += $(libsys_openocd)
endif

$(board_outdir):
	mkdir -p $@

#-------------------------------------------------------------------------
# Build Object Files from C Source
#-------------------------------------------------------------------------

# libgloss
gloss_c_srcs = $(filter %.c, $(gloss_srcs))
gloss_c_objs = $(gloss_c_srcs:%.c=%.o)
gloss_c_deps = $(gloss_c_srcs:%.c=%.d)

gloss_objs += $(gloss_c_objs)
deps += $(gloss_c_deps)
junk += $(gloss_c_deps) $(gloss_c_objs)

# libsys_qemu
syscalls_qemu_c_srcs = $(filter %.c, $(syscalls_qemu_src))
syscalls_qemu_c_objs = $(syscalls_qemu_c_srcs:%.c=%_qemu.o)
syscalls_qemu_c_deps = $(syscalls_qemu_c_srcs:%.c=%_qemu.d)

syscalls_qemu_objs += $(syscalls_qemu_c_objs)
deps += $(syscalls_qemu_c_deps)
junk += $(syscalls_qemu_c_deps) $(syscalls_qemu_c_objs)

# libsys_openocd
syscalls_openocd_c_srcs = $(filter %.c, $(syscalls_openocd_src))
syscalls_openocd_c_objs = $(syscalls_openocd_c_srcs:%.c=%_openocd.o)
syscalls_openocd_c_deps = $(syscalls_openocd_c_srcs:%.c=%_openocd.d)

syscalls_openocd_objs += $(syscalls_openocd_c_objs)
deps += $(syscalls_openocd_c_deps)
junk += $(syscalls_openocd_c_deps) $(syscalls_openocd_c_objs)

#-------------------------------------------------------------------------
# Build Object Files from Assembly Source
gloss_asm_srcs = $(filter %.S, $(gloss_srcs))
gloss_asm_objs = $(patsubst %.S, %.o, $(notdir $(gloss_asm_srcs)))
gloss_asm_deps = $(patsubst %.S, %.d, $(notdir $(gloss_asm_srcs)))

gloss_objs += $(gloss_asm_objs)
deps += $(gloss_asm_deps)
junk += $(gloss_asm_deps) $(gloss_asm_objs)

syscalls_qemu_asm_srcs = $(filter %.S, $(syscalls_qemu_src))
syscalls_qemu_asm_objs = $(patsubst %.S, %.o, $(notdir $(syscalls_qemu_asm_srcs)))
syscalls_qemu_asm_deps = $(patsubst %.S, %.d, $(notdir $(syscalls_qemu_asm_srcs)))

syscalls_qemu_objs += $(syscalls_qemu_asm_objs)
deps += $(syscalls_qemu_asm_deps)
junk += $(syscalls_qemu_asm_deps) $(syscalls_qemu_asm_objs)

#-------------------------------------------------------------------------
# Build libgloss.a
#-------------------------------------------------------------------------

gloss_lib  = libgloss.a
$(gloss_lib) : $(gloss_objs)
	$(AR) rcv $@ $^
	$(RANLIB) $@

junk += $(gloss_lib)

install_hdrs += $(gloss_hdrs)
install_libs += $(gloss_lib)
install_specs += $(gloss_specs)
install_ldscripts += $(gloss_ldscripts)

#-------------------------------------------------------------------------
# Build libsys_qemu.a
#-------------------------------------------------------------------------

$(libsys_qemu) : $(syscalls_qemu_objs)
	$(AR) rcv $@ $^
	$(RANLIB) $@

junk += $(libsys_qemu)

#-------------------------------------------------------------------------
# Build libsys_openocd.a
#-------------------------------------------------------------------------

$(libsys_openocd) : $(syscalls_openocd_objs)
	$(AR) rcv $@ $^
	$(RANLIB) $@

junk += $(libsys_openocd)

#-------------------------------------------------------------------------
# Build crtX object files
#-------------------------------------------------------------------------

crtX_obj  = $(patsubst %.S, %.o, $(crtX_source))
crtX_deps = $(patsubst %.S, %.d, $(crtX_source))

deps += $(crtX_deps)
junk += $(crtX_deps) $(crtX_obj)

install_libs += $(crtX_obj)

#-------------------------------------------------------------------------
# Autodependency files
#-------------------------------------------------------------------------

-include $(deps)

deps : $(deps)
.PHONY : deps

#-------------------------------------------------------------------------
# Installation
#-------------------------------------------------------------------------

install_hdrs_wdir += $(addprefix $(src_dir)/, $(install_hdrs))
install-hdrs : $(install_hdrs_wdir)
	test -d $(install_hdrs_dir) || mkdir -p $(install_hdrs_dir)
	for file in $^; do \
		$(INSTALL_DATA) $$file $(install_hdrs_dir)/; \
	done

install-libs : $(install_libs)
	test -d $(install_libs_dir) || mkdir -p $(install_libs_dir)
	for file in $^; do \
		$(INSTALL_DATA) $$file $(install_libs_dir)/$$file; \
	done

install-specs : $(install_specs)
	test -d $(install_libs_dir) || mkdir -p $(install_libs_dir)
	for file in $^; do \
		$(INSTALL_DATA) $$file $(install_libs_dir)/; \
	done

install-ldscripts : $(install_ldscripts)
	test -d $(install_libs_dir) || mkdir -p $(install_libs_dir)
	for file in $^; do \
		$(INSTALL_DATA) $$file $(install_libs_dir)/; \
	done

install : install-hdrs install-libs install-specs install-ldscripts
.PHONY : install install-hdrs install-libs

#-------------------------------------------------------------------------
# Regenerate configure information
#-------------------------------------------------------------------------

configure_prereq = \
  $(src_dir)/configure.in \

$(src_dir)/configure : $(configure_prereq)
	cd $(src_dir) && autoconf

config.status : $(src_dir)/configure
	./config.status --recheck

Makefile : $(src_dir)/Makefile.in config.status
	./config.status

dist_junk += config.status Makefile config.log

#-------------------------------------------------------------------------
# Default
#-------------------------------------------------------------------------

all : $(board_outdir) $(install_libs)
.PHONY : all

#-------------------------------------------------------------------------
# Clean up junk
#-------------------------------------------------------------------------

clean :
	rm -rf *~ \#* $(junk)

distclean :
	rm -rf *~ \#* $(junk) $(dist_junk)

.PHONY : clean distclean
