stages:
  - build
  - manual_action
  - test

image: $CI_DOCKER_REGISTRY/esp32-toolchain

variables:
  GIT_DEPTH: "1"

  CTNG_CONF_TARGET: xtensa-esp32-elf
  CTNG_ARCHIVE: ${CTNG_CONF_TARGET}-newlib-g${CI_COMMIT_SHA}.tar.xz

.use_ci_tools: &use_ci_tools |
  curl -sSL ${CIT_LOADER_URL} -o cit_loader.sh && sh cit_loader.sh
  source citools/import_functions
  source citools/crosstool_develop

.add_gitlab_key: &add_gitlab_key |
  cit_add_ssh_key "${GITLAB_KEY}"

.update_crosstool_submodules: &update_crosstool_submodules |
  cit_git_clean_stale_submodules
  git config submodule.overlays.url $GITLAB_SSH_SERVER/idf/xtensa-overlays.git
  git submodule update --init

before_script:
  - *use_ci_tools
  - *add_gitlab_key

# To test we have to build and package the toolchain based on the current version
# of all our Crosstool-NG, GCC, Newlib projects
build_crosstool_ng:
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-toolchain
  artifacts:
    paths:
      - ${CTNG_ARCHIVE}
      - .config
      - build.log
    when: always
    expire_in: 3 day
  variables:
    CTNG_BRANCH: "-b esp-2020r2"
  after_script:
    # 'after_script' has a new clean environment
    - source citools/import_functions
    - source citools/crosstool_develop

    # save artifacts in any case (both failure or success)
    - mv crosstool-NG/{.config,build.log} .
    - cit_rm crosstool-NG

    - cit_cleanup_prj_archive
  script:
    # Create an archive of this testable Newlib revision, CIT_PRJ_ARCHIVE
    - cit_create_prj_archive

    # Getting crosstool
    - *add_gitlab_key
    - git clone ${CTNG_BRANCH} --depth 1 ${GITLAB_SSH_SERVER}/idf/crosstool-NG.git
    - cd crosstool-NG
    - *update_crosstool_submodules

    # Configure the crosstool
    - cit_ct_configure
    - echo "# CT_DEBUG_GDB is not set" >> .config

    # Use the testable Newlib revision from the archive
    - sed -i '/_CUSTOM_LOCATION/d' ./scripts/upgrade.sed
    - echo "CT_NEWLIB_SRC_CUSTOM=y" >> .config
    - echo "CT_NEWLIB_CUSTOM_LOCATION=\"${CIT_PRJ_ARCHIVE}\"" >> .config

    # Build
    - cit_ct_build

    # Save CT archive
    - cd builds
    - rm -v -f ${CTNG_CONF_TARGET}/build.log.bz2
    - tar cJf ${CI_PROJECT_DIR}/${CTNG_ARCHIVE} ${CTNG_CONF_TARGET}
    - du -hs ${CTNG_CONF_TARGET}/*
    - ls -l ${CI_PROJECT_DIR}/${CTNG_ARCHIVE}
    - echo "***"
    - echo "    You can keep the compiled toolchain for a long time (e.g. for local tests) by clicking the 'Keep' button on the right"
    - echo "***"

.get_toolchain: &get_toolchain |
  tar xf ${CTNG_ARCHIVE}
  cit_rm ${CTNG_ARCHIVE}
  export PATH=${CI_PROJECT_DIR}/${CTNG_CONF_TARGET}/bin:${PATH}

esp-tests:
  stage: test
  image: $CI_DOCKER_REGISTRY/compiler-testsuite:1
  dependencies:
    - build_crosstool_ng
  artifacts:
    when: always
    paths:
      - esp-compiler-tests/*/*.log
      - esp-compiler-tests/*/*.elf
  variables:
    GIT_STRATEGY: none
    ESP_COMPILER_TESTS_BRANCH: "-b esp-2020r1"
  after_script:
    - source citools/import_functions
    - cit_rm ${CTNG_CONF_TARGET}
  script:
    - *get_toolchain
    - *add_gitlab_key
    - cit_rm esp-compiler-tests
    - git clone --depth 1 $ESP_COMPILER_TESTS_BRANCH ${GITLAB_SSH_SERVER}/idf/esp-compiler-tests.git
    - cd esp-compiler-tests
    - source xtensa-esp32-profile
    - ./run-all.sh

.manual_action: &manual_action
  stage: manual_action
  when: manual
  allow_failure: true

upload_to_http:
  <<: *manual_action
  dependencies:
    - build_crosstool_ng
  variables:
    GIT_STRATEGY: none
  script:
    - cit_add_ssh_key "${HTTP_UPLOAD_KEY}"
    - scp ${CTNG_ARCHIVE} ${HTTP_UPLOAD_DIR}
    # Show info
    - echo -e "\nArchives were published over there:\n\n${HTTP_PUBLIC_DIR}/${CTNG_ARCHIVE}"
